import Head from "next/head"
import { useRouter } from "next/router"
import { FormEvent, useEffect, useReducer, useState } from "react"

export default function Home() {
  const router = useRouter()

  const [blogs, setBlogs] = useState([] as any[])
  const [onEdit, setOnEdit] = useState<null | number>(null)

  const [email, setEmail] = useState("")
  const [title, setTitle] = useState("")
  const [body, setBody] = useState("")

  function clearForm() {
    setEmail("")
    setTitle("")
    setBody("")
  }

  function fetchBlogs() {
    fetch("http://localhost:8000/blogs/")
      .then((resp) => resp.json())
      .then((json) => {
        json.sort(
          (a: any, b: any) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()
        )
        setBlogs(json)
      })
  }

  useEffect(() => {
    const interval = setInterval(() => {
      fetchBlogs()
    }, 1000)

    return () => clearInterval(interval)
  }, [fetchBlogs])

  function handleReadMore(id: number) {
    router.push(`/look?id=${id}`)
  }

  function handleSubmit(e: any) {
    e?.preventDefault()

    if (typeof onEdit === "number") {
      handleSubmitEdit()
    } else {
      handleSubmitCreate(e)
    }
  }

  function handleSubmitCreate(e: FormEvent<HTMLFormElement>) {
    // Notice the backslash!
    fetch("http://localhost:8000/blogs/", {
      method: "POST",
      // Perhaps headers is neccessary.
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        email,
        title,
        body,
      }),
    })
      .then((resp) => {
        if (resp.ok) {
          alert(`Created`)
          clearForm()
        }
      })
      .catch((e) => {
        alert(`Error displayed in console.`)
        console.error(e)
      })
      .finally(() => {
        fetchBlogs()
      })
  }

  function handleEditing(id: number) {
    setOnEdit(id)

    const blog = blogs.find((blog) => blog.id === id)
    if (blog) {
      setEmail(blog.email)
      setTitle(blog.title)
      setBody(blog.body)
    } else {
      setOnEdit(null)
      alert("Blog not found")
    }
  }

  function handleSubmitEdit() {
    // Notice the backslash!
    fetch(`http://localhost:8000/blogs/${onEdit}/`, {
      method: "PUT",
      // Perhaps headers is neccessary.
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        id: onEdit,
        email,
        title,
        body,
      }),
    })
      .then((resp) => {
        if (resp.ok) {
          alert(`Edited`)
          clearForm()
          setOnEdit(null)
        }
      })
      .catch((e) => {
        alert(`Error displayed in console.`)
        console.error(e)
      })
      .finally(() => {
        fetchBlogs()
      })
  }

  function handleDelete(id: number) {
    fetch(`http://localhost:8000/blogs/${id}`, {
      method: "DELETE",
      // Perhaps headers is neccessary.
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
    })
      .then((resp) => (resp.ok ? alert(`Created`) : null))
      .catch((e) => {
        alert(`Is success: false, Error displayed in console.`)
        console.error(e)
      })
      .finally(() => {
        fetchBlogs()
      })
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <form onSubmit={(e) => handleSubmit(e)}>
        {typeof onEdit === "number" ? (
          <>
            <label htmlFor="id">
              <b>Edit ID:</b>
            </label>
            <input type="number" name="id" id="id" required disabled value={onEdit} />
            <br />
          </>
        ) : undefined}
        <label htmlFor="email">Email:</label>
        <input
          type="email"
          name="email"
          id="email"
          required
          maxLength={254}
          onChange={(e) => setEmail(e.target.value)}
          value={email}
        />
        <br />
        <label htmlFor="title">Title:</label>
        <input
          type="text"
          name="title"
          id="title"
          required
          maxLength={1024}
          onChange={(e) => setTitle(e.target.value)}
          value={title}
        />
        <br />
        <label htmlFor="body">Content:</label>
        <textarea
          name="body"
          id="body"
          onChange={(e) => setBody(e.target.value)}
          value={body}
        ></textarea>
        <br />
        <button type="submit">
          {typeof onEdit === "number" ? "Change the blog" : "Create a blog"}
        </button>
        <button
          type="button"
          onClick={() => {
            setOnEdit(null)
            clearForm()
          }}
          hidden={typeof onEdit !== "number"}
        >
          Cancel Edit
        </button>
        <br />
      </form>
      <hr />
      {blogs.map((blog) => (
        <div key={blog.id}>
          <h2>{blog.title}</h2>
          <button onClick={() => handleDelete(blog.id)}>Delete</button>
          <button onClick={() => handleEditing(blog.id)}>Edit</button>
          <button onClick={() => handleReadMore(blog.id)}>Read More</button>

          <h3>{blog.email}</h3>
          <h4>Created at {blog.created_at}</h4>
          <h4>Updated at {blog.updated_at}</h4>

          <p>{blog.body.slice(0, 256)}...</p>
          <br />
        </div>
      ))}
    </>
  )
}
